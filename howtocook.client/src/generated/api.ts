//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

//-----ClientClass--Client---
export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    areas(): Promise<AreaListResponse> {
        let url_ = this.baseUrl + "/api/Areas";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAreas(_response);
        });
    }

    protected processAreas(response: Response): Promise<AreaListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AreaListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaListResponse>(null as any);
    }

    /**
     * @return OK
     */
    areas2(id: number): Promise<AreaResponse> {
        let url_ = this.baseUrl + "/api/Areas/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAreas2(_response);
        });
    }

    protected processAreas2(response: Response): Promise<AreaResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AreaResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaResponse>(null as any);
    }

    /**
     * @param search (optional) 
     * @return OK
     */
    categories(search: string | undefined): Promise<CategoryListResponse> {
        let url_ = this.baseUrl + "/api/Categories?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategories(_response);
        });
    }

    protected processCategories(response: Response): Promise<CategoryListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryListResponse>(null as any);
    }

    /**
     * @return OK
     */
    categories2(id: number): Promise<CategoryResponse> {
        let url_ = this.baseUrl + "/api/Categories/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategories2(_response);
        });
    }

    protected processCategories2(response: Response): Promise<CategoryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryResponse>(null as any);
    }

    /**
     * @return OK
     */
    ingredientsAll(): Promise<Ingredient[]> {
        let url_ = this.baseUrl + "/api/Ingredients";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIngredientsAll(_response);
        });
    }

    protected processIngredientsAll(response: Response): Promise<Ingredient[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Ingredient.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Ingredient[]>(null as any);
    }

    /**
     * @return OK
     */
    ingredients(id: number): Promise<Ingredient> {
        let url_ = this.baseUrl + "/api/Ingredients/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIngredients(_response);
        });
    }

    protected processIngredients(response: Response): Promise<Ingredient> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Ingredient.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Ingredient>(null as any);
    }

    /**
     * @param category (optional) 
     * @param area (optional) 
     * @param skip (optional) 
     * @param limit (optional) 
     * @param search (optional) 
     * @return OK
     */
    recipes(category: number | undefined, area: number | undefined, skip: number | undefined, limit: number | undefined, search: string | undefined): Promise<RecipeListResponse> {
        let url_ = this.baseUrl + "/api/Recipes?";
        if (category === null)
            throw new Error("The parameter 'category' cannot be null.");
        else if (category !== undefined)
            url_ += "Category=" + encodeURIComponent("" + category) + "&";
        if (area === null)
            throw new Error("The parameter 'area' cannot be null.");
        else if (area !== undefined)
            url_ += "Area=" + encodeURIComponent("" + area) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecipes(_response);
        });
    }

    protected processRecipes(response: Response): Promise<RecipeListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecipeListResponse>(null as any);
    }

    /**
     * @return OK
     */
    recipes2(id: number): Promise<RecipeResponse> {
        let url_ = this.baseUrl + "/api/Recipes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecipes2(_response);
        });
    }

    protected processRecipes2(response: Response): Promise<RecipeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecipeResponse>(null as any);
    }

    /**
     * @return OK
     */
    getWeatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}
//-----/ClientClass----

export * as Query from './api/Query';



//-----Types.File-----
export class Area implements IArea {
    id?: number;
    name!: string;

    constructor(data?: IArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Area {
        data = typeof data === 'object' ? data : {};
        let result = new Area();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IArea {
    id?: number;
    name: string;
}

export class AreaListResponse implements IAreaListResponse {
    items?: Area[] | undefined;
    metadata?: ListMetadata;

    constructor(data?: IAreaListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Area.fromJS(item));
            }
            this.metadata = _data["metadata"] ? ListMetadata.fromJS(_data["metadata"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AreaListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AreaListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAreaListResponse {
    items?: Area[] | undefined;
    metadata?: ListMetadata;
}

export class AreaResponse implements IAreaResponse {
    item?: Area;

    constructor(data?: IAreaResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? Area.fromJS(_data["item"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AreaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AreaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAreaResponse {
    item?: Area;
}

export class CategoryListResponse implements ICategoryListResponse {
    items?: CategoryListResponseJson[] | undefined;
    metadata?: ListMetadata;

    constructor(data?: ICategoryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CategoryListResponseJson.fromJS(item));
            }
            this.metadata = _data["metadata"] ? ListMetadata.fromJS(_data["metadata"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryListResponse {
    items?: CategoryListResponseJson[] | undefined;
    metadata?: ListMetadata;
}

export class CategoryListResponseJson implements ICategoryListResponseJson {
    id?: number;
    name!: string;
    description!: string;
    thumb?: string | undefined;

    constructor(data?: ICategoryListResponseJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.thumb = _data["thumb"];
        }
    }

    static fromJS(data: any): CategoryListResponseJson {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryListResponseJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["thumb"] = this.thumb;
        return data;
    }
}

export interface ICategoryListResponseJson {
    id?: number;
    name: string;
    description: string;
    thumb?: string | undefined;
}

export class CategoryResponse implements ICategoryResponse {
    item?: CategoryResponseJson;

    constructor(data?: ICategoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? CategoryResponseJson.fromJS(_data["item"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryResponse {
    item?: CategoryResponseJson;
}

export class CategoryResponseJson implements ICategoryResponseJson {
    id?: number;
    name!: string;
    description!: string;
    thumb?: string | undefined;

    constructor(data?: ICategoryResponseJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.thumb = _data["thumb"];
        }
    }

    static fromJS(data: any): CategoryResponseJson {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryResponseJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["thumb"] = this.thumb;
        return data;
    }
}

export interface ICategoryResponseJson {
    id?: number;
    name: string;
    description: string;
    thumb?: string | undefined;
}

export class Ingredient implements IIngredient {
    id?: number;
    name!: string;
    description?: string | undefined;
    type?: string | undefined;

    constructor(data?: IIngredient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Ingredient {
        data = typeof data === 'object' ? data : {};
        let result = new Ingredient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["type"] = this.type;
        return data;
    }
}

export interface IIngredient {
    id?: number;
    name: string;
    description?: string | undefined;
    type?: string | undefined;
}

export class JsonRecipeIngredient implements IJsonRecipeIngredient {
    ingredient?: string | undefined;
    measure?: string | undefined;

    constructor(data?: IJsonRecipeIngredient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredient = _data["ingredient"];
            this.measure = _data["measure"];
        }
    }

    static fromJS(data: any): JsonRecipeIngredient {
        data = typeof data === 'object' ? data : {};
        let result = new JsonRecipeIngredient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredient"] = this.ingredient;
        data["measure"] = this.measure;
        return data;
    }
}

export interface IJsonRecipeIngredient {
    ingredient?: string | undefined;
    measure?: string | undefined;
}

export class ListMetadata implements IListMetadata {
    count?: number;
    total?: number;

    constructor(data?: IListMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): ListMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new ListMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        data["total"] = this.total;
        return data;
    }
}

export interface IListMetadata {
    count?: number;
    total?: number;
}

export class RecipeListResponse implements IRecipeListResponse {
    items?: RecipeListResponseJson[] | undefined;
    metadata?: ListMetadata;

    constructor(data?: IRecipeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RecipeListResponseJson.fromJS(item));
            }
            this.metadata = _data["metadata"] ? ListMetadata.fromJS(_data["metadata"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RecipeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRecipeListResponse {
    items?: RecipeListResponseJson[] | undefined;
    metadata?: ListMetadata;
}

export class RecipeListResponseJson implements IRecipeListResponseJson {
    id?: number;
    name?: string | undefined;
    thumb?: string | undefined;
    category?: string | undefined;
    area?: string | undefined;

    constructor(data?: IRecipeListResponseJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.thumb = _data["thumb"];
            this.category = _data["category"];
            this.area = _data["area"];
        }
    }

    static fromJS(data: any): RecipeListResponseJson {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeListResponseJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["thumb"] = this.thumb;
        data["category"] = this.category;
        data["area"] = this.area;
        return data;
    }
}

export interface IRecipeListResponseJson {
    id?: number;
    name?: string | undefined;
    thumb?: string | undefined;
    category?: string | undefined;
    area?: string | undefined;
}

export class RecipeResponse implements IRecipeResponse {
    item?: RecipeResponseJson;

    constructor(data?: IRecipeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? RecipeResponseJson.fromJS(_data["item"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RecipeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRecipeResponse {
    item?: RecipeResponseJson;
}

export class RecipeResponseJson implements IRecipeResponseJson {
    id?: number;
    name?: string | undefined;
    thumb?: string | undefined;
    category?: string | undefined;
    area?: string | undefined;
    instructions?: string | undefined;
    ingredients?: JsonRecipeIngredient[] | undefined;

    constructor(data?: IRecipeResponseJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.thumb = _data["thumb"];
            this.category = _data["category"];
            this.area = _data["area"];
            this.instructions = _data["instructions"];
            if (Array.isArray(_data["ingredients"])) {
                this.ingredients = [] as any;
                for (let item of _data["ingredients"])
                    this.ingredients!.push(JsonRecipeIngredient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecipeResponseJson {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeResponseJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["thumb"] = this.thumb;
        data["category"] = this.category;
        data["area"] = this.area;
        data["instructions"] = this.instructions;
        if (Array.isArray(this.ingredients)) {
            data["ingredients"] = [];
            for (let item of this.ingredients)
                data["ingredients"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRecipeResponseJson {
    id?: number;
    name?: string | undefined;
    thumb?: string | undefined;
    category?: string | undefined;
    area?: string | undefined;
    instructions?: string | undefined;
    ingredients?: JsonRecipeIngredient[] | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? parseDateOnly(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

function parseDateOnly(s: string) {
    const date = new Date(s);
    return new Date(date.getTime() + 
        date.getTimezoneOffset() * 60000);
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

//-----/Types.File-----

import { addResultTypeFactory } from './api/helpers';
export { setBaseUrl, getBaseUrl } from './api/helpers';
export { setFetchFactory, getFetch } from './api/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './api/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___areas', (data: any) => { const result = new AreaListResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___areas2', (data: any) => { const result = new AreaResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___categories', (data: any) => { const result = new CategoryListResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___categories2', (data: any) => { const result = new CategoryResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___ingredientsAll', (data: any) => { const result = new Ingredient(); result.init(data); return result; });
  addResultTypeFactory('Client___ingredients', (data: any) => { const result = new Ingredient(); result.init(data); return result; });
  addResultTypeFactory('Client___recipes', (data: any) => { const result = new RecipeListResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___recipes2', (data: any) => { const result = new RecipeResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___getWeatherForecast', (data: any) => { const result = new WeatherForecast(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----